from models.model import Model
import numpy as np
from tensorflow.keras import Sequential, layers, models
from tensorflow.keras.layers.experimental.preprocessing import Rescaling
from tensorflow.keras.optimizers import RMSprop, Adam

class RandomModel(Model):
        # Your code goes here
        # you have to initialize self.model to a keras model
        # very similar to transfered_model.py, the only difference is that you should randomize the weights
        # load your basic model with keras's load_model function
        # freeze the weights of the loaded model to make sure the training doesn't affect them
        # (check the number of total params, trainable params and non-trainable params in your summary generated by train_transfer.py)
        # randomize the weights of the loaded model, possibly by using _randomize_layers
        # use this model by removing the last layer, adding dense layers and an output layer
    def _define_model(self, input_shape, categories_count):

        #same as transfer model just random weights
        basic_model = models.load_model('results/basic_model_10_epochs_timestamp_1708659836.keras')
        for layer in basic_model.layers:
            layer.trainable = False    
        #randomize weights of layers
        self._randomize_layers(basic_model)
        self.model = Sequential [(
            *basic_model.layers[:-1],
            layers.Dense(64, activation = 'relu'),
            layers.Dropout(0.5),
            layers.Dense(categories_count, activation='softmax')
        )]
    
    def _compile_model(self):
        self.model.compile(
            optimizer=RMSprop(learning_rate=0.001),
            loss='categorical_crossentropy',
            metrics=['accuracy'],
        )

    @staticmethod
    def _randomize_layers(model):
        # Your code goes here
        for layer in model.layers:
        # you can write a function here to set the weights to a random value
        # use this function in _define_model to randomize the weights of your loaded model
            if layer.get_weights() is True:
                shape = layer.get_weights()[0].shape
                random_weights = np.random.standard_normal(shape)
                layer.set_weights([random_weights, np.zeros_like(shape)])
            else:
                pass
