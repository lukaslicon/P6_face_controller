from models.model import Model
from tensorflow.keras import Sequential, layers, models
from tensorflow.keras.layers.experimental.preprocessing import Rescaling
from tensorflow.keras.optimizers import RMSprop, Adam

class TransferedModel(Model):
    def _define_model(self, input_shape, categories_count):
        # Your code goes heres
        self.model = Sequential()
        # you have to initialize self.model to a keras model
        # load your basic model with keras's load_model function
        basic_model = models.load_model('results/basic_model_10_epochs_timestamp_1708659836.keras')
        # freeze the weights of the loaded model to make sure the training doesn't affect them
        for layer in basic_model.layers:
            layer.trainable = False

        # (check the number of total params, trainable params and non-trainable params in your summary generated by train_transfer.py)
        self.model = Sequential [(
            *basic_model.layers[:-1],

            layers.Dense(64, activation = 'relu'),
            layers.Dropout(0.5),
            
            #output
            layers.Dense(categories_count, activation='softmax')
        )]
        # use this model by removing the last layer, adding dense layers and an output layer
    
    def _compile_model(self):
        self.model.compile(
            optimizer=RMSprop(learning_rate=0.001),
            loss='categorical_crossentropy',
            metrics=['accuracy'],
        )
        
